using Take4.Rs274ngcParser;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System;

namespace Take4.Rs274ngcParser.Tests {
	[TestClass()]
	public class ParseGCodeStreamTests {
		class StoreValue : ICommandActor {
			public int preCount = -1;
			public int postCount = -1;
			public List<string> values = new List<string>();
			public bool ActionLine(LineCommand line) {
				values.Add(OutputGCode.ToString(line));
				return true;
			}

			public void PostAction() {
				postCount = values.Count;
			}

			public void PreAction() {
				preCount = values.Count;
			}
		}

		class StoreValueError : ICommandActor {
			public int preCount = -1;
			public int postCount = -1;
			public List<string> values = new List<string>();
			public bool ActionLine(LineCommand line) {
				values.Add(OutputGCode.ToString(line));
				return false;
			}

			public void PostAction() {
				postCount = values.Count;
			}

			public void PreAction() {
				preCount = values.Count;
			}
		}

		[TestMethod()]
		public void ParseTest1() {
			var test = new ParseGCodeStream();
			var actor = new StoreValue();
			string lines = @"G1 Y2
G1 X10";
			using (var str = new MemoryStream(Encoding.ASCII.GetBytes(lines))) {
				Assert.AreEqual(test.Parse(str, actor), true);
			}
			Assert.AreEqual(actor.preCount, 0);
			Assert.AreEqual(actor.postCount, 2);
			Assert.AreEqual(actor.values.Count, 2);
			Assert.AreEqual(actor.values[0], "G1 Y2");
			Assert.AreEqual(actor.values[1], "G1 X10");
		}

		[TestMethod()]
		public void ParseTest2() {
			var test = new ParseGCodeStream();
			var actor = new StoreValue();
			string lines = @"G1 Y2
G1 X10
G1 G1";
			using (var str = new MemoryStream(Encoding.ASCII.GetBytes(lines))) {
				Assert.AreEqual(test.Parse(str, actor), false);
			}
			Assert.AreEqual(actor.preCount, 0);
			Assert.AreEqual(actor.postCount, 2);
			Assert.AreEqual(actor.values.Count, 2);
			Assert.AreEqual(actor.values[0], "G1 Y2");
			Assert.AreEqual(actor.values[1], "G1 X10");
		}

		[TestMethod()]
		public void ParseTes21() {
			var test = new ParseGCodeStream();
			var actor = new StoreValueError();
			string lines = @"G1 Y2
G1 X10";
			using (var str = new MemoryStream(Encoding.ASCII.GetBytes(lines))) {
				Assert.AreEqual(test.Parse(str, actor), false);
			}
			Assert.AreEqual(actor.preCount, 0);
			Assert.AreEqual(actor.postCount, 1);
			Assert.AreEqual(actor.values.Count, 1);
			Assert.AreEqual(actor.values[0], "G1 Y2");
		}

		[TestMethod()]
		[DeploymentItem(@"TestFile\FlashPrint.gx")]
		public void SkipXGcodeTestFlashPrint() {
			using (var stream = File.Open(@"TestFile\FlashPrint.gx", FileMode.Open)) {
				Rs274ngcParser.ParseGCodeStream.SkipXGcode(stream);
				var buffer = new List<Byte>();
				for (var val = stream.ReadByte(); val != -1; val = stream.ReadByte()) {
					buffer.Add((Byte)val);
					if (val == 0x0a) {
						break;
					}
				}
				var line = Encoding.ASCII.GetString(buffer.ToArray()).Trim();
				Assert.AreEqual(line.StartsWith(";generated by ffslicer"), true);
			}
		}

		[TestMethod()]
		[DeploymentItem(@"TestFile\Slic3r.g")]
		public void SkipXGcodeTestSlice3r() {
			using (var stream = File.Open(@"TestFile\Slic3r.g", FileMode.Open)) {
				Rs274ngcParser.ParseGCodeStream.SkipXGcode(stream);
				var buffer = new List<Byte>();
				for (var val = stream.ReadByte(); val != -1; val = stream.ReadByte()) {
					buffer.Add((Byte)val);
					if (val == 0x0a) {
						break;
					}
				}
				var line = Encoding.ASCII.GetString(buffer.ToArray()).Trim();
				Assert.AreEqual(line.StartsWith("; generated by Slic3r"), true);
			}
		}

		[TestMethod()]
		[DeploymentItem(@"TestFile\Simplify3D.g")]
		public void SkipXGcodeTestSimplify3D() {
			using (var stream = File.Open(@"TestFile\Simplify3D.g", FileMode.Open)) {
				Rs274ngcParser.ParseGCodeStream.SkipXGcode(stream);
				var buffer = new List<Byte>();
				for (var val = stream.ReadByte(); val != -1; val = stream.ReadByte()) {
					buffer.Add((Byte)val);
					if (val == 0x0a) {
						break;
					}
				}
				var line = Encoding.ASCII.GetString(buffer.ToArray()).Trim();
				Assert.AreEqual(line.StartsWith("; G-Code generated by Simplify3D(R)"), true);
			}
		}
	}
}